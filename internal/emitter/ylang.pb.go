// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ylang.proto

package emitter

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type OpCode int32

const (
	OpCode_NOP         OpCode = 0
	OpCode_PUSH        OpCode = 1
	OpCode_POP         OpCode = 2
	OpCode_LOCAL       OpCode = 3
	OpCode_LOAD        OpCode = 4
	OpCode_STORE       OpCode = 5
	OpCode_STORE_AT    OpCode = 6
	OpCode_SET_PIXEL   OpCode = 7
	OpCode_CALL        OpCode = 8
	OpCode_BR          OpCode = 9
	OpCode_BR_FALSE    OpCode = 10
	OpCode_LOG         OpCode = 11
	OpCode_RET         OpCode = 12
	OpCode_OR          OpCode = 13
	OpCode_AND         OpCode = 14
	OpCode_EQ          OpCode = 15
	OpCode_GT          OpCode = 16
	OpCode_GE          OpCode = 17
	OpCode_LT          OpCode = 18
	OpCode_LE          OpCode = 19
	OpCode_CONCAT      OpCode = 20
	OpCode_ADD         OpCode = 21
	OpCode_SUB         OpCode = 22
	OpCode_MUL         OpCode = 23
	OpCode_DIV         OpCode = 24
	OpCode_MOD         OpCode = 25
	OpCode_IN          OpCode = 26
	OpCode_NEG         OpCode = 27
	OpCode_NOT         OpCode = 28
	OpCode_MK_POINT    OpCode = 29
	OpCode_CALL_MEMBER OpCode = 30
	OpCode_INDEX       OpCode = 31
	OpCode_INDEX_RANGE OpCode = 32
	OpCode_GET_PIXEL   OpCode = 33
	OpCode_MK_KERNEL   OpCode = 34
	OpCode_MK_HASHMAP  OpCode = 35
	OpCode_MK_LIST     OpCode = 36
)

var OpCode_name = map[int32]string{
	0:  "NOP",
	1:  "PUSH",
	2:  "POP",
	3:  "LOCAL",
	4:  "LOAD",
	5:  "STORE",
	6:  "STORE_AT",
	7:  "SET_PIXEL",
	8:  "CALL",
	9:  "BR",
	10: "BR_FALSE",
	11: "LOG",
	12: "RET",
	13: "OR",
	14: "AND",
	15: "EQ",
	16: "GT",
	17: "GE",
	18: "LT",
	19: "LE",
	20: "CONCAT",
	21: "ADD",
	22: "SUB",
	23: "MUL",
	24: "DIV",
	25: "MOD",
	26: "IN",
	27: "NEG",
	28: "NOT",
	29: "MK_POINT",
	30: "CALL_MEMBER",
	31: "INDEX",
	32: "INDEX_RANGE",
	33: "GET_PIXEL",
	34: "MK_KERNEL",
	35: "MK_HASHMAP",
	36: "MK_LIST",
}

var OpCode_value = map[string]int32{
	"NOP":         0,
	"PUSH":        1,
	"POP":         2,
	"LOCAL":       3,
	"LOAD":        4,
	"STORE":       5,
	"STORE_AT":    6,
	"SET_PIXEL":   7,
	"CALL":        8,
	"BR":          9,
	"BR_FALSE":    10,
	"LOG":         11,
	"RET":         12,
	"OR":          13,
	"AND":         14,
	"EQ":          15,
	"GT":          16,
	"GE":          17,
	"LT":          18,
	"LE":          19,
	"CONCAT":      20,
	"ADD":         21,
	"SUB":         22,
	"MUL":         23,
	"DIV":         24,
	"MOD":         25,
	"IN":          26,
	"NEG":         27,
	"NOT":         28,
	"MK_POINT":    29,
	"CALL_MEMBER": 30,
	"INDEX":       31,
	"INDEX_RANGE": 32,
	"GET_PIXEL":   33,
	"MK_KERNEL":   34,
	"MK_HASHMAP":  35,
	"MK_LIST":     36,
}

func (x OpCode) String() string {
	return proto.EnumName(OpCode_name, int32(x))
}

func (OpCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3d43067efeb224de, []int{0}
}

type Instruction struct {
	Opcode OpCode `protobuf:"varint,1,opt,name=opcode,proto3,enum=emitter.OpCode" json:"opcode,omitempty"`
	// Types that are valid to be assigned to Arg:
	//	*Instruction_Integer
	//	*Instruction_Float
	//	*Instruction_Str
	Arg                  isInstruction_Arg `protobuf_oneof:"arg"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *Instruction) Reset()         { *m = Instruction{} }
func (m *Instruction) String() string { return proto.CompactTextString(m) }
func (*Instruction) ProtoMessage()    {}
func (*Instruction) Descriptor() ([]byte, []int) {
	return fileDescriptor_3d43067efeb224de, []int{0}
}

func (m *Instruction) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Instruction.Unmarshal(m, b)
}
func (m *Instruction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Instruction.Marshal(b, m, deterministic)
}
func (m *Instruction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Instruction.Merge(m, src)
}
func (m *Instruction) XXX_Size() int {
	return xxx_messageInfo_Instruction.Size(m)
}
func (m *Instruction) XXX_DiscardUnknown() {
	xxx_messageInfo_Instruction.DiscardUnknown(m)
}

var xxx_messageInfo_Instruction proto.InternalMessageInfo

func (m *Instruction) GetOpcode() OpCode {
	if m != nil {
		return m.Opcode
	}
	return OpCode_NOP
}

type isInstruction_Arg interface {
	isInstruction_Arg()
}

type Instruction_Integer struct {
	Integer int32 `protobuf:"varint,2,opt,name=integer,proto3,oneof"`
}

type Instruction_Float struct {
	Float float32 `protobuf:"fixed32,3,opt,name=float,proto3,oneof"`
}

type Instruction_Str struct {
	Str string `protobuf:"bytes,4,opt,name=str,proto3,oneof"`
}

func (*Instruction_Integer) isInstruction_Arg() {}

func (*Instruction_Float) isInstruction_Arg() {}

func (*Instruction_Str) isInstruction_Arg() {}

func (m *Instruction) GetArg() isInstruction_Arg {
	if m != nil {
		return m.Arg
	}
	return nil
}

func (m *Instruction) GetInteger() int32 {
	if x, ok := m.GetArg().(*Instruction_Integer); ok {
		return x.Integer
	}
	return 0
}

func (m *Instruction) GetFloat() float32 {
	if x, ok := m.GetArg().(*Instruction_Float); ok {
		return x.Float
	}
	return 0
}

func (m *Instruction) GetStr() string {
	if x, ok := m.GetArg().(*Instruction_Str); ok {
		return x.Str
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Instruction) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Instruction_Integer)(nil),
		(*Instruction_Float)(nil),
		(*Instruction_Str)(nil),
	}
}

type Program struct {
	Instructions         []*Instruction `protobuf:"bytes,1,rep,name=instructions,proto3" json:"instructions,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *Program) Reset()         { *m = Program{} }
func (m *Program) String() string { return proto.CompactTextString(m) }
func (*Program) ProtoMessage()    {}
func (*Program) Descriptor() ([]byte, []int) {
	return fileDescriptor_3d43067efeb224de, []int{1}
}

func (m *Program) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Program.Unmarshal(m, b)
}
func (m *Program) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Program.Marshal(b, m, deterministic)
}
func (m *Program) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Program.Merge(m, src)
}
func (m *Program) XXX_Size() int {
	return xxx_messageInfo_Program.Size(m)
}
func (m *Program) XXX_DiscardUnknown() {
	xxx_messageInfo_Program.DiscardUnknown(m)
}

var xxx_messageInfo_Program proto.InternalMessageInfo

func (m *Program) GetInstructions() []*Instruction {
	if m != nil {
		return m.Instructions
	}
	return nil
}

func init() {
	proto.RegisterEnum("emitter.OpCode", OpCode_name, OpCode_value)
	proto.RegisterType((*Instruction)(nil), "emitter.Instruction")
	proto.RegisterType((*Program)(nil), "emitter.Program")
}

func init() { proto.RegisterFile("ylang.proto", fileDescriptor_3d43067efeb224de) }

var fileDescriptor_3d43067efeb224de = []byte{
	// 469 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x52, 0x4d, 0x73, 0x93, 0x50,
	0x14, 0x0d, 0x21, 0x81, 0xe4, 0x92, 0x26, 0xd7, 0x67, 0xad, 0x58, 0xbf, 0x30, 0x3a, 0x63, 0xc6,
	0x45, 0x16, 0x75, 0xe3, 0x96, 0xc0, 0x33, 0x30, 0x3c, 0x78, 0xf8, 0x20, 0x4e, 0x77, 0x4c, 0x6c,
	0x31, 0x93, 0x99, 0x36, 0x64, 0x08, 0x2e, 0xfc, 0x01, 0xfe, 0x04, 0xff, 0xaf, 0x73, 0x49, 0xad,
	0x76, 0x75, 0xce, 0x3d, 0xf7, 0x5c, 0x38, 0x9c, 0x01, 0xac, 0x9f, 0x37, 0xeb, 0xdd, 0x66, 0xbe,
	0xaf, 0xab, 0xa6, 0x62, 0x66, 0x79, 0xbb, 0x6d, 0x9a, 0xb2, 0x9e, 0xfe, 0xd2, 0xc0, 0x0a, 0x77,
	0x87, 0xa6, 0xfe, 0x71, 0xd5, 0x6c, 0xab, 0x1d, 0x7b, 0x0f, 0x46, 0xb5, 0xbf, 0xaa, 0xae, 0x4b,
	0x5b, 0x73, 0xb4, 0xd9, 0xf8, 0x62, 0x32, 0xbf, 0x73, 0xce, 0xe5, 0xde, 0xab, 0xae, 0x4b, 0x75,
	0xb7, 0x66, 0xe7, 0x60, 0x6e, 0x77, 0x4d, 0xb9, 0x29, 0x6b, 0xbb, 0xeb, 0x68, 0xb3, 0x7e, 0xd0,
	0x51, 0x7f, 0x05, 0x76, 0x06, 0xfd, 0xef, 0x37, 0xd5, 0xba, 0xb1, 0x75, 0x47, 0x9b, 0x75, 0x83,
	0x8e, 0x3a, 0x8e, 0x8c, 0x81, 0x7e, 0x68, 0x6a, 0xbb, 0xe7, 0x68, 0xb3, 0x61, 0xd0, 0x51, 0x34,
	0x2c, 0xfa, 0xa0, 0xaf, 0xeb, 0xcd, 0xd4, 0x03, 0x33, 0xad, 0xab, 0x4d, 0xbd, 0xbe, 0x65, 0x9f,
	0x60, 0xb4, 0xfd, 0x97, 0xe8, 0x60, 0x6b, 0x8e, 0x3e, 0xb3, 0x2e, 0x4e, 0xef, 0x83, 0xfc, 0x17,
	0x57, 0x3d, 0x70, 0x7e, 0xf8, 0xad, 0x83, 0x71, 0x8c, 0xc9, 0x4c, 0xd0, 0x13, 0x99, 0x62, 0x87,
	0x0d, 0xa0, 0x97, 0xae, 0xb2, 0x00, 0x35, 0x92, 0x52, 0x99, 0x62, 0x97, 0x0d, 0xa1, 0x2f, 0xa4,
	0xe7, 0x0a, 0xd4, 0x69, 0x2b, 0xa4, 0xeb, 0x63, 0x8f, 0xc4, 0x2c, 0x97, 0x8a, 0x63, 0x9f, 0x8d,
	0x60, 0xd0, 0xd2, 0xc2, 0xcd, 0xd1, 0x60, 0x27, 0x30, 0xcc, 0x78, 0x5e, 0xa4, 0xe1, 0x25, 0x17,
	0x68, 0xd2, 0x85, 0xe7, 0x0a, 0x81, 0x03, 0x66, 0x40, 0x77, 0xa1, 0x70, 0x48, 0xf6, 0x85, 0x2a,
	0x3e, 0xbb, 0x22, 0xe3, 0x08, 0xf4, 0x16, 0x21, 0x97, 0x68, 0x11, 0x51, 0x3c, 0xc7, 0x11, 0xf9,
	0xa4, 0xc2, 0x13, 0x12, 0xdc, 0xc4, 0xc7, 0x31, 0x09, 0xfc, 0x0b, 0x4e, 0x08, 0x97, 0x39, 0x62,
	0x8b, 0x1c, 0x1f, 0x11, 0x8a, 0x1c, 0x59, 0x8b, 0x1c, 0x1f, 0x33, 0x00, 0xc3, 0x93, 0x89, 0xe7,
	0xe6, 0x78, 0xda, 0x1e, 0xfb, 0x3e, 0x3e, 0x21, 0x92, 0xad, 0x16, 0x78, 0x46, 0x24, 0x5e, 0x09,
	0x7c, 0x4a, 0xc4, 0x0f, 0xbf, 0xa2, 0xdd, 0x2a, 0xd2, 0xc7, 0x67, 0xf4, 0x80, 0x30, 0xc1, 0xf3,
	0xb6, 0x04, 0xbe, 0xc4, 0xe7, 0xc7, 0x36, 0x72, 0x7c, 0x41, 0x59, 0xe3, 0xa8, 0x48, 0x65, 0x98,
	0xe4, 0xf8, 0x92, 0x4d, 0xc0, 0xa2, 0x6f, 0x29, 0x62, 0x1e, 0x2f, 0xb8, 0xc2, 0x57, 0x54, 0x42,
	0x98, 0xf8, 0xfc, 0x12, 0x5f, 0xd3, 0xae, 0xa5, 0x85, 0x72, 0x93, 0x25, 0x47, 0x87, 0x7a, 0x58,
	0xde, 0xf7, 0xf0, 0x86, 0xc6, 0x38, 0x2a, 0x22, 0xae, 0x12, 0x2e, 0x70, 0xca, 0xc6, 0x00, 0x71,
	0x54, 0x04, 0x6e, 0x16, 0xc4, 0x6e, 0x8a, 0x6f, 0x99, 0x05, 0x66, 0x1c, 0x15, 0x22, 0xcc, 0x72,
	0x7c, 0xf7, 0xcd, 0x68, 0x7f, 0xba, 0x8f, 0x7f, 0x02, 0x00, 0x00, 0xff, 0xff, 0x26, 0x3e, 0x9f,
	0x25, 0x83, 0x02, 0x00, 0x00,
}
