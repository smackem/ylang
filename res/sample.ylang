SobelX := [-1  0  1
           -2  0  2
           -1  0  1]
SobelY := [ 1  2  1
            0  0  0
           -1 -2 -1]

Laplace := [-1 -1 -1
            -1  8 -1
            -1 -1 -1]

Gauss := [0 1 2 1 0
          1 2 4 2 1
          2 4 8 4 2
          1 2 4 2 1
          0 1 2 1 0]

//Median := [1 1 1 1 1 1 1 1
//           1 1 1 1 1 1 1 1
//           1 1 1 1 1 1 1 1
//           1 1 1 1 1 1 1 1
//           1 1 1 1 1 1 1 1
//           1 1 1 1 1 1 1 1
//           1 1 1 1 1 1 1 1
//           1 1 1 1 1 1 1 1]
//Center := (Median.radius);(Median.radius)
//for pos in Bounds {
//    rs := sort(map_r(pos, Median))
//    gs := sort(map_g(pos, Median))
//    bs := sort(map_b(pos, Median))
//    @pos = rgb(rs[Center], gs[Center], bs[Center])
//}
//commit

/////////////////// greyscale
//
for pos in Bounds {
    i := @pos.i
    @pos = rgb(i, i, i)
}
commit

/////////////////// smoothen
//
for pos in Bounds {
    @pos = convolute(pos, Gauss)
}
commit

/////////////////// find gradients and suppress non-maxima
//
q0   := [0 0 0
         1 1 1
         0 0 0]
q45  := [0 0 1
         0 1 0
         1 0 0]
q90  := [0 1 0
         0 1 0
         0 1 0]
q135 := [1 0 0
         0 1 0
         0 0 1]

for pos in Bounds {
    sx := convolute(pos, SobelX)
    sy := convolute(pos, SobelY)
    mag := sqrt(sx.r * sx.r + sy.r * sy.r)
    angle := sx.r != 0 ? 0 : atan(sy.r / sx.r) * 180 / Pi
    k := 0
    if angle > 157.5 or angle <= 22.5 {
        k = q0
    } else if angle <= 67.5 {
        k = q45
    } else if angle <= 112.5 {
        k = q90
    } else if angle <= 157.5 {
        k = q135
    }
    if angle >= 45 and angle < 90 {
        color = #00ff00
    }
    @pos = rgb(mag, mag, mag)
}
commit

/////////////////// hysteresis
//
Neighbours := [1 1 1
               1 1 1
               1 1 1]
for pos in Bounds {
    val := @pos.r
    if val > 10 {
        val = 255
    } else if val < 5 {
        val = 0
    } else {
        neighbours := map_r(pos, Neighbours)
        if max(neighbours) > 10 {
            val = 255
        } else {
            val = 0
        }
    }

    @pos = rgb(val, val, val)
}
commit

//Neighbours := [1 1 1
//               1 1 1
//               1 1 1]
//
//for pos in Bounds {
//    rs := map_r(pos, Neighbours)
//    gs := map_g(pos, Neighbours)
//    bs := map_b(pos, Neighbours)
//    r := rs[4] == max(rs) ? rs[4] : 0
//    if r < 100 {
//        r = 0
//    }
//    g := gs[4] == max(gs) ? gs[4] : 0
//    if g < 100 {
//        g = 0
//    }
//    b := bs[4] == max(bs) ? bs[4] : 0
//    if b < 100 {
//        b = 0
//    }
//    @pos = rgb(r, g, b)
//}
//commit
