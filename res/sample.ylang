SobelX := [-1  0  1
           -2  0  2
           -1  0  1]
SobelY := [ 1  2  1
            0  0  0
           -1 -2 -1]

Laplace := [-1 -1 -1
            -1  8 -1
            -1 -1 -1]

Gauss := [0 1 2 1 0
          1 2 4 2 1
          2 4 8 4 2
          1 2 4 2 1
          0 1 2 1 0]

Median := [1 1 1 1 1
           1 1 1 1 1
           1 1 1 1 1
           1 1 1 1 1
           1 1 1 1 1]
MedianCenter := 2;2

/////////////////// greyscale
for pos in Bounds {
    i := @pos.i
    @pos = rgb(i, i, i)
}
commit

/////////////////// smoothen
for pos in Bounds {
    @pos = 123
    @pos = convolute(pos, Gauss)
}
commit

/////////////////// sobel

q0   := [0 0 0
         1 1 1
         0 0 0]
q45  := [0 0 1
         0 1 0
         1 0 0]
q90  := [0 1 0
         0 1 0
         0 1 0]
q135 := [1 0 0
         0 1 0
         0 0 1]

for pos in Bounds {
    sx := convolute(pos, SobelX)
    sy := convolute(pos, SobelY)
    mag := sqrt(sx.r * sx.r + sy.r * sy.r)
    k := [0 0 0 0]
    angle := sx.r == 0 ? 0 : atan(sy.r / sx.r) * 180 / Pi + 90
    if angle > 157.5 or angle <= 22.5 {
        k = q90
    } else if angle <= 67.5 {
        k = q135
    } else if angle <= 112.5 {
        k = q0
    } else if angle <= 157.5 {
        k = q45
    }
    area := map_r(pos, k)
    if max(area) != area[4] {
        mag = 0
    }
    @pos = rgb(mag, mag, mag)
}
commit

Neighbours := [1 1 1
               1 1 1
               1 1 1]
for pos in Bounds {
    val := @pos.r
    if val > 10 {
        val = 255
    } else if val < 5 {
        val = 0
    } else {
        neighbours := map_r(pos, Neighbours)
        if max(neighbours) > 10 {
            val = 255
        } else {
            val = 0
        }
    }

    @pos = rgb(val, val, val)
}
commit
