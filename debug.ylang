OutBounds := resize(800, 600)

DrawLine := fn(line, color) {
    for p in line {
        @p = color
    }
}

DrawDot := fn(p, color) {
    rc := rect(p.x - 2, p.y - 2, 5, 5)
    for pp in rect(p.x - 2, p.y - 2, 5, 5) {
        if pp.x == rc.left and pp.y == rc.top
        or pp.x == rc.left and pp.y == rc.bottom-1
        or pp.x == rc.right-1 and pp.y == rc.top
        or pp.x == rc.right-1 and pp.y == rc.bottom-1 {
            // do nothing to round corners
        } else {
            @pp = color
        }
    }
}

DrawAndIntersect := fn(line1, color1, line2, color2) {
    if color1 != nil {
        DrawLine(line1, color1)
    }
    if color2 != nil {
        DrawLine(line2, color2)
    }
    intersection := intersect(line1, line2)
    if intersection != nil {
        log(intersection)
        DrawDot(intersection, #ff0000)
    }
}

whiteLine := line(0;0, 100;100)
greenLine := line(0;100, 100;0)
yellowLine := line(30;150, 600;100)
blueLine := line(0;250, 500;80)
magentaLine := line(60;0, 60;300)
cyanLine := line(0;70, 600;70)

DrawAndIntersect(whiteLine, #ffffff, greenLine, #00ff00)
DrawAndIntersect(yellowLine, #ffff00, blueLine, #0000ff)

DrawAndIntersect(whiteLine, nil, magentaLine, #ff00ff)
DrawAndIntersect(greenLine, nil, magentaLine, nil)
DrawAndIntersect(yellowLine, nil, magentaLine, nil)
DrawAndIntersect(blueLine, nil, magentaLine, nil)

DrawAndIntersect(whiteLine, nil, cyanLine, #00ffff)
DrawAndIntersect(greenLine, nil, cyanLine, nil)
DrawAndIntersect(yellowLine, nil, cyanLine, nil)
DrawAndIntersect(blueLine, nil, cyanLine, nil)
