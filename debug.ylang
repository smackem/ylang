MakeGauss := fn(radius) {
    len := radius * 2 + 1
    k := kernel(len, len, 0)
    for y in 0 .. len {
        base := y > radius ? len - y - 1 : y
        for x in 0 .. len {
            k[x;y] = pow(2, base + (x > radius ? len - x - 1 : x))
        }
    }
    return k
}

Gauss := MakeGauss(10)

Poly := translate_polygon(
    polygon(100;100, 300;110, 200;400),
    150;0)

Outline := fn(thickness, func) {
    withSingleLine := fn(l) {
        angle := atan(l.dy / l.dx)
        dx := abs(sin(angle))
        dy := abs(cos(angle))
        for delta in 0 .. thickness {
            for p in translate_line(l, dx*delta - thickness/2; dy*delta - thickness/2) {
                @p = func(p)
            }
        }
    }
    prevPt := nil
    for p in Poly.vertices {
        if prevPt != nil {
            withSingleLine(line(prevPt, p))
        }
        prevPt = p
    }
    withSingleLine(line(prevPt, Poly.vertices[0]))
}

blt(Bounds)

roberts1 := | 1  0
              0 -1|
roberts2 := | 0  1
             -1  0|
for p in Poly {
    mag := hypot_rgb(convolute(p, roberts1), convolute(p, roberts2))
    @p = rgb(mag.r, mag.g, mag.b)
}
flip()

Outline(5, fn(p) -> convolute(p, Gauss))

///////////////////////////////////////////////////////////////

log("min: ", min(1, 10, 20, -1, -5, 100))
log("min: ", min_list([1, 10, 20, -1, -5, 100]))
log("min: ", min_kernel(|1 10 20 -1|))

log("max: ", max(1, 10, 20, -1, -5, 100))
log("max: ", max_list([1, 10, 20, -1, -5, 100]))
log("max: ", max_kernel(|1 10 20 -1|))

///////////////////////////////////////////////////////////////

OutBounds := resize(360, 100)
PlotVLine := fn(x, color) {
    for y in 0 .. OutBounds.height {
        @(x;y) = color
    }
}

for x in 0 .. OutBounds.width {
    ex := x * Deg2Rad
    s := sin(ex)
    c := cos(ex)
    color := -srgb(max(s, 0), abs(min(s, 0)), abs(c))
    //color := srgb((sin(ex) + 1) / 2, (cos(ex) + 1) / 2, (tan(ex) + 1) / 2)
    PlotVLine(x, color)
}
