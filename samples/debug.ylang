ls := [
    {
        name: "x",
        age: 20,
    },
    {
        name: "k",
        age: 30,
    },
    {
        name: "a",
        age: 100,
    },
]
log(sort(ls, fn(a, b) -> compare(a.name, b.name)))
log(sort(ls, fn(a, b) -> compare(a.age, b.age)))

return nil

///////////////////////////////////////////////////////////////////////////////

blt(Bounds)

cir := circle(400;200, 150)
for l in outline(cir) {
    for p in l { @p = #ff0000 }
}

rc := rect(100, 100, 120, 60)
for l in outline(rc) {
    for p in l { @p = #00ff00 }
}

poly := polygon(500;100, 600;120, 650;150, 550;300)
for l in outline(poly) {
    for p in l { @p = #0000ff }
}

l := [1,2,3]
log(l, " ", sum(l))
log([], " ", sum([]))

k := |1 2 3 4|
log(k, " ", sum(k))

log(hsv(rgb(255, 255, 0)))
log(sort([44, 2, 23, 94, 5943]))
hypot(1)
min("asd")
log(max("asd"))
list()
kernel(12)
translate(1)
polygon("abc")

return nil

///////////////////////////////////////////////////////////////////////////////

x := 0
y := 100

while x < y {
    x = x + 1
    y = y - 1
    log(x)
}

return nil

///////////////////////////////////////////////////////////////////////////////

circleA := circle(400;200, 150)

for p in circleA {
    @p = @p
}

flip()

alphaKernel := kernel(7, 7, 1)
Gauss := gauss(3)
origSum := sum(alphaKernel)

for p in circleA {
    mask := fetchAlpha(p, alphaKernel)
    if min(mask) != max(mask) {
        alpha := sum(mask) / origSum
        px := convolute(p, Gauss)
        @p = rgba(px.r, px.g, px.b, alpha)
    } else {
        @p = @p
    }
}

return nil

///////////////////////////////////////////////////////////////////////////////

l := [1,2,3]
log(l, " ", sum(l))
log([], " ", sum([]))

k := |1 2 3 4|
log(k, " ", sum(k))

return nil

///////////////////////////////////////////////////////////////////////////////

blt(Bounds)

for p in polygon(100;100, 500;100, 300;300) {
    @p = compose(@p, #000000:40)
}
return nil


///////////////////////////////////////////////////////////////////////////////
log("Greyscale, Smoothen...")

Gauss := gauss(7)

for p in Bounds {
    blurred := convolute(p, Gauss)
    @p = grey(blurred.i)
}

SourceImage := flip()

///////////////////////////////////////////////////////////////////////////////
log("Detect Edges...")

SobelX := |-1  0  1
           -2  0  2
           -1  0  1|
SobelY := | 1  2  1
            0  0  0
           -1 -2 -1|

MaxRho := hypot(Bounds.w, Bounds.h)
log("MaxRho: ", MaxRho)
MaxTheta := 180 // degrees
Acc := kernel(MaxRho * 2, MaxTheta, 0)

for p in Bounds {
    gx := convolute(p, SobelX).r
    gy := convolute(p, SobelY).r
    mag := hypot(gx, gy)
    if mag > 200 {
        theta := gx == 0 ? 0 : atan(gy / gx) * Rad2Deg
        minTheta := theta - 1
        maxTheta := theta + 1
        //log("mintheta: ", minTheta, " maxtheta: ", maxTheta)
        if theta >= 157.5 or theta < 22.5  {
            minTheta = 157
            maxTheta = 203
        } else if theta < 67.5 {
            minTheta = 23
            maxTheta = 68
        } else if theta < 112.5 {
            minTheta = 68
            maxTheta = 113
        } else if theta < 157.5 {
            minTheta = 113
            maxTheta = 158
        }
        for theta in minTheta .. maxTheta {
            theta = theta % 180
            thetaRad := theta * Deg2Rad
            rho := p.x * cos(thetaRad) + p.y * sin(thetaRad)
            accX := MaxRho + rho
            accY := theta
            weight := Acc[accX;accY] + 1
            Acc[accX;accY] = weight
        }
        @p = grey(mag)
    } else {
        @p = Black
    }
}

flip()

///////////////////////////////////////////////////////////////////////////////
log("Find Maxima, Visualize...")

outBounds := resize(Acc.w, Acc.h)
for p in outBounds {
    @p = grey(Acc[p.x;p.y])
}
flip()

k := kernel(11, 11, 1)
log("k: ", k)
maxWeight := 0
for p in Bounds {
    if @p.r > 0 {
        neighbours := fetchRed(p, k)
        maximum := max(neighbours)
        @p = @p.r == maximum ? grey(@p.r) : Black
        if @p.r == maximum {
            log("neighbours: ", neighbours)
        }
        maxWeight = max(maxWeight, maximum)
    }
}
flip()

lines := []
threshold := maxWeight * 0.3
for p in Bounds {
    if @p.r > threshold {
        lines = lines :: {
            rho: p.x,
            theta: p.y,
        }
    }
}
log(lines)


///////////////////////////////////////////////////////////////////////////////
log("Draw Lines...")

recall(SourceImage)
outBounds := resize(Bounds.w, Bounds.h)
blt(Bounds)

for l in lines {
    // rho = x * cos(theta) + y * sin(theta)
    thetaRad := l.theta * Deg2Rad
    rho := l.rho - MaxRho
    lineToDraw := nil
    color := #00ff00
    if l.theta >= 45 and l.theta <= 135 {
        // line has low slope -> intersect with x borders
        // y = (rho - x * cos(theta)) / sin(theta)
        y1 := rho / sin(thetaRad)
        y2 := (rho - Bounds.w * cos(thetaRad)) / sin(thetaRad)
        lineToDraw = line(0;y1, Bounds.w;y2)
    } else {
        // line has high slope -> intersect with y borders
        // x = (rho - y * sin(theta)) / cos(theta)
        x1 := rho / cos(thetaRad)
        x2 := (rho - Bounds.h * sin(thetaRad)) / cos(thetaRad)
        lineToDraw = line(x1;0, x2;Bounds.h)
    }
    log(lineToDraw)
    for p in lineToDraw { @p = color }
}
