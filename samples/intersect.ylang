// ylang version of algorithm: calculate intersection point of line(p1, p2) and line(p3, p4)
Intersect := fn(p1, p2, p3, p4) {
    if p1.x == p2.x {
        return IntersectVertical(p3, p4, p1.x)
    }
    if p3.x == p4.x {
        return IntersectVertical(p1, p2, p3.x)
    }

    m1 := (p2.y - p1.y) / (p2.x - p1.x)
    m2 := (p4.y - p3.y) / (p4.x - p3.x)

    if m1 == m2 {
        // the lines are parallel
        return nil
    }

    x := (m1 * p1.x - m2 * p3.x + p3.y - p1.y) / (m1 - m2)
    y := (x - p1.x) * m1 + p1.y
    return x;y
}

IntersectVertical := fn(p1, p2, x) {
    if p1.x == p2.x {
        // line is parallel to y axis
        return nil
    }
    return x; (x - p1.x) * (p2.y - p1.y) / (p2.x - p1.x) + p1.y
}

DrawDot := fn(p, color) {
    plot(circle(p, 2), color)
}

DrawAndIntersect := fn(line1, color1, line2, color2) {
    if color1 != nil {
        plot(line1, color1)
    }
    if color2 != nil {
        plot(line2, color2)
    }
    intersection := intersect(line1, line2)
    if intersection != nil {
        log(intersection)
        DrawDot(intersection, #ff0000)
    }
}

Intersections := fn() {
    OutBounds := resize(800, 600)
    plot(p, Black)

    whiteLine := line(0;0, 100;100)
    greenLine := line(0;100, 100;0)
    yellowLine := line(30;150, 600;100)
    blueLine := line(0;250, 500;80)
    magentaLine := line(60;0, 60;300)
    cyanLine := line(0;70, 600;70)

    DrawAndIntersect(whiteLine, #ffffff, greenLine, #00ff00)
    DrawAndIntersect(yellowLine, #ffff00, blueLine, #0000ff)

    DrawAndIntersect(whiteLine, nil, magentaLine, #ff00ff)
    DrawAndIntersect(greenLine, nil, magentaLine, nil)
    DrawAndIntersect(yellowLine, nil, magentaLine, nil)
    DrawAndIntersect(blueLine, nil, magentaLine, nil)

    DrawAndIntersect(whiteLine, nil, cyanLine, #00ffff)
    DrawAndIntersect(greenLine, nil, cyanLine, nil)
    DrawAndIntersect(yellowLine, nil, cyanLine, nil)
    DrawAndIntersect(blueLine, nil, cyanLine, nil)
}

Intersections()
