
///////////////////////////////////////////////////////////////////////////////
log("Initialize...")

MaxTheta := 180 // degrees
Sin := kernel_fn(MaxTheta, 1, fn(angle, _) -> sin(angle * Deg2Rad))
Cos := kernel_fn(MaxTheta, 1, fn(angle, _) -> cos(angle * Deg2Rad))

Plot := fn(figure, color) {
    for p in figure {
        @p = color
    }
}

///////////////////////////////////////////////////////////////////////////////
log("Greyscale, Smoothen...")

Gauss := gauss(7)

for p in Bounds {
    blurred := convolute(p, Gauss)
    @p = grey(blurred.i)
}

SourceImage := flip()

///////////////////////////////////////////////////////////////////////////////
log("Detect Edges...")

SobelX := |-1  0  1
           -2  0  2
           -1  0  1|
SobelY := | 1  2  1
            0  0  0
           -1 -2 -1|

for p in Bounds {
    gx := convolute(p, SobelX).r
    gy := convolute(p, SobelY).r
    mag := hypot(gx, gy)
    @p = mag > 200 ? grey(mag) : Black
}

flip()

///////////////////////////////////////////////////////////////////////////////
log("Accumulate...")

MaxRho := hypot(Bounds.w, Bounds.h)
log("MaxRho: ", MaxRho)
Acc := kernel(MaxRho * 2, MaxTheta, 0)

for p in Bounds {
    if @p.r > 0 {
        for theta in 0 .. MaxTheta {
            rho := p.x * Cos[theta] + p.y * Sin[theta]
            ptAcc := MaxRho + rho; theta
            weight := Acc[ptAcc] + 1
            Acc[ptAcc] = weight
        }
    }
}

///////////////////////////////////////////////////////////////////////////////
log("Find Maxima, Visualize...")

outBounds := resize(Acc.w, Acc.h)
for p in outBounds {
    @p = grey(Acc[p.x;p.y])
}
flip()

k := kernel(11, 11, 1)
maxWeight := 0
for p in Bounds {
    neighbours := fetch_red(p, k)
    maximum := max_kernel(neighbours)
    @p = @p.r == maximum ? grey(@p.r) : Black
    maxWeight = max(maxWeight, maximum)
}
flip()

houghLines := []
threshold := maxWeight * 0.5
for p in Bounds {
    if @p.r > threshold {
        houghLines = houghLines :: {
            rho: p.x,
            theta: p.y,
        }
    }
}
log(houghLines)

for l in houghLines {
    Plot(circle(l.rho;l.theta, 2), #ff0000)
}

return nil

///////////////////////////////////////////////////////////////////////////////
log("Draw Lines...")

recall(SourceImage)
outBounds := resize(Bounds.w, Bounds.h)
blt(Bounds)

for l in houghLines {
    // rho = x * cos(theta) + y * sin(theta)
    theta := l.theta
    rho := l.rho - MaxRho
    lineToDraw := nil
    color := #00ff00
    if theta >= 45 and theta <= 135 {
        // line has low slope -> intersect with x borders
        // y = (rho - x * cos(theta)) / sin(theta)
        y1 := rho / Sin[theta]
        y2 := (rho - Bounds.w * Cos[theta]) / Sin[theta]
        lineToDraw = line(0;y1, Bounds.w;y2)
    } else {
        // line has high slope -> intersect with y borders
        // x = (rho - y * sin(theta)) / cos(theta)
        x1 := rho / Cos[theta]
        x2 := (rho - Bounds.h * Sin[theta]) / Cos[theta]
        lineToDraw = line(x1;0, x2;Bounds.h)
    }
    log(lineToDraw)
    Plot(lineToDraw, color)
}
